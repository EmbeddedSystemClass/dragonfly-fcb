/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.3 at Mon May 18 17:55:03 2015. */

#ifndef PB_FCB_FSM_PB_H_INCLUDED
#define PB_FCB_FSM_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _MsgFunction {
    MsgFunction_QUERY = 0,
    MsgFunction_COMMAND = 1,
    MsgFunction_RESPONSE = 2
} MsgFunction;

typedef enum _FlightCmdSourceType {
    FlightCmdSourceType_RADIO_CONTROLLER = 1,
    FlightCmdSourceType_COLLISION_AVOIDANCE = 2,
    FlightCmdSourceType_FSM = 3
} FlightCmdSourceType;

/* Struct definitions */
typedef struct _ConnectToFsm {
    MsgFunction fcn;
} ConnectToFsm;

typedef struct _CurrentFlightCmdSource {
    FlightCmdSourceType source;
} CurrentFlightCmdSource;

typedef struct _FlightCommands {
    bool has_Climb;
    uint32_t Climb;
    bool has_Descend;
    uint32_t Descend;
    bool has_RotateClockwise;
    uint32_t RotateClockwise;
    bool has_RotateAnticlockwise;
    uint32_t RotateAnticlockwise;
    bool has_SidewaysToPort;
    uint32_t SidewaysToPort;
    bool has_SidewaysToStarboard;
    uint32_t SidewaysToStarboard;
} FlightCommands;

typedef struct _FlightControlSystemParameters {
    bool has_AltitudeCtrl_K;
    uint32_t AltitudeCtrl_K;
    bool has_AltitudeCtrl_Ti;
    uint32_t AltitudeCtrl_Ti;
    bool has_AltitudeCtrl_Td;
    uint32_t AltitudeCtrl_Td;
    bool has_RollPitchCtrl_K;
    uint32_t RollPitchCtrl_K;
    bool has_RollPitchCtrl_Ti;
    uint32_t RollPitchCtrl_Ti;
    bool has_RollPitchCtrl_Td;
    uint32_t RollPitchCtrl_Td;
    bool has_YawCtrl_K;
    uint32_t YawCtrl_K;
    bool has_YawCtrl_Ti;
    uint32_t YawCtrl_Ti;
    bool has_YawCtrl_Td;
    uint32_t YawCtrl_Td;
} FlightControlSystemParameters;

typedef struct _FlightSensorSamples {
    bool has_gyroRoll;
    uint32_t gyroRoll;
    bool has_gyroPitch;
    uint32_t gyroPitch;
    bool has_gyroYaw;
    uint32_t gyroYaw;
    bool has_accX;
    uint32_t accX;
    bool has_accY;
    uint32_t accY;
    bool has_accZ;
    uint32_t accZ;
    bool has_magX;
    uint32_t magX;
    bool has_magY;
    uint32_t magY;
    bool has_magZ;
    uint32_t magZ;
} FlightSensorSamples;

typedef struct _MotorSamples {
    bool has_Motor1NanoS;
    uint32_t Motor1NanoS;
    bool has_Motor2NanoS;
    uint32_t Motor2NanoS;
    bool has_Motor3NanoS;
    uint32_t Motor3NanoS;
    bool has_Motor4NanoS;
    uint32_t Motor4NanoS;
} MotorSamples;

typedef struct _ProximitySensorSamples {
    bool has_posX;
    uint32_t posX;
    bool has_negX;
    uint32_t negX;
    bool has_posY;
    uint32_t posY;
    bool has_negY;
    uint32_t negY;
    bool has_posZ;
    uint32_t posZ;
    bool has_negZ;
    uint32_t negZ;
} ProximitySensorSamples;

typedef struct _QuadcopterConfig {
    bool has_Mass;
    uint32_t Mass;
    bool has_Ixx;
    uint32_t Ixx;
    bool has_Iyy;
    uint32_t Iyy;
    bool has_Izz;
    uint32_t Izz;
} QuadcopterConfig;

typedef struct _RCConfig {
    bool has_throttleMinMicroS;
    uint32_t throttleMinMicroS;
    bool has_throttleMaxMicroS;
    uint32_t throttleMaxMicroS;
    bool has_aileronMinMicroS;
    uint32_t aileronMinMicroS;
    bool has_aileronMaxMicroS;
    uint32_t aileronMaxMicroS;
    bool has_elevatorMinMicroS;
    uint32_t elevatorMinMicroS;
    bool has_elevatorMaxMicroS;
    uint32_t elevatorMaxMicroS;
    bool has_rudderMinMicroS;
    uint32_t rudderMinMicroS;
    bool has_rudderMaxMicroS;
    uint32_t rudderMaxMicroS;
    bool has_gearOnMicroS;
    uint32_t gearOnMicroS;
    bool has_gearOffMicroS;
    uint32_t gearOffMicroS;
    bool has_auxOnMicroS;
    uint32_t auxOnMicroS;
    bool has_auxOffMicroS;
    uint32_t auxOffMicroS;
} RCConfig;

typedef struct _RCSamples {
    bool has_throttleMicroS;
    uint32_t throttleMicroS;
    bool has_aileronMicroS;
    uint32_t aileronMicroS;
    bool has_elevatorMicroS;
    uint32_t elevatorMicroS;
    bool has_rudderMicroS;
    uint32_t rudderMicroS;
    bool has_gearMicroS;
    uint32_t gearMicroS;
    bool has_auxMicroS;
    uint32_t auxMicroS;
} RCSamples;

/* Default values for struct fields */

/* Initializer values for message structs */
#define ConnectToFsm_init_default                {(MsgFunction)0}
#define FlightSensorSamples_init_default         {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define ProximitySensorSamples_init_default      {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define QuadcopterConfig_init_default            {false, 0, false, 0, false, 0, false, 0}
#define RCConfig_init_default                    {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define RCSamples_init_default                   {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define MotorSamples_init_default                {false, 0, false, 0, false, 0, false, 0}
#define FlightControlSystemParameters_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define FlightCommands_init_default              {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define CurrentFlightCmdSource_init_default      {(FlightCmdSourceType)0}
#define ConnectToFsm_init_zero                   {(MsgFunction)0}
#define FlightSensorSamples_init_zero            {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define ProximitySensorSamples_init_zero         {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define QuadcopterConfig_init_zero               {false, 0, false, 0, false, 0, false, 0}
#define RCConfig_init_zero                       {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define RCSamples_init_zero                      {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define MotorSamples_init_zero                   {false, 0, false, 0, false, 0, false, 0}
#define FlightControlSystemParameters_init_zero  {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define FlightCommands_init_zero                 {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define CurrentFlightCmdSource_init_zero         {(FlightCmdSourceType)0}

/* Field tags (for use in manual encoding/decoding) */
#define ConnectToFsm_fcn_tag                     1
#define CurrentFlightCmdSource_source_tag        1
#define FlightCommands_Climb_tag                 1
#define FlightCommands_Descend_tag               2
#define FlightCommands_RotateClockwise_tag       3
#define FlightCommands_RotateAnticlockwise_tag   4
#define FlightCommands_SidewaysToPort_tag        5
#define FlightCommands_SidewaysToStarboard_tag   6
#define FlightControlSystemParameters_AltitudeCtrl_K_tag 1
#define FlightControlSystemParameters_AltitudeCtrl_Ti_tag 2
#define FlightControlSystemParameters_AltitudeCtrl_Td_tag 3
#define FlightControlSystemParameters_RollPitchCtrl_K_tag 4
#define FlightControlSystemParameters_RollPitchCtrl_Ti_tag 5
#define FlightControlSystemParameters_RollPitchCtrl_Td_tag 6
#define FlightControlSystemParameters_YawCtrl_K_tag 7
#define FlightControlSystemParameters_YawCtrl_Ti_tag 8
#define FlightControlSystemParameters_YawCtrl_Td_tag 9
#define FlightSensorSamples_gyroRoll_tag         1
#define FlightSensorSamples_gyroPitch_tag        2
#define FlightSensorSamples_gyroYaw_tag          3
#define FlightSensorSamples_accX_tag             4
#define FlightSensorSamples_accY_tag             5
#define FlightSensorSamples_accZ_tag             6
#define FlightSensorSamples_magX_tag             7
#define FlightSensorSamples_magY_tag             8
#define FlightSensorSamples_magZ_tag             9
#define MotorSamples_Motor1NanoS_tag             1
#define MotorSamples_Motor2NanoS_tag             2
#define MotorSamples_Motor3NanoS_tag             3
#define MotorSamples_Motor4NanoS_tag             4
#define ProximitySensorSamples_posX_tag          1
#define ProximitySensorSamples_negX_tag          2
#define ProximitySensorSamples_posY_tag          3
#define ProximitySensorSamples_negY_tag          4
#define ProximitySensorSamples_posZ_tag          5
#define ProximitySensorSamples_negZ_tag          6
#define QuadcopterConfig_Mass_tag                1
#define QuadcopterConfig_Ixx_tag                 2
#define QuadcopterConfig_Iyy_tag                 3
#define QuadcopterConfig_Izz_tag                 4
#define RCConfig_throttleMinMicroS_tag           1
#define RCConfig_throttleMaxMicroS_tag           2
#define RCConfig_aileronMinMicroS_tag            3
#define RCConfig_aileronMaxMicroS_tag            4
#define RCConfig_elevatorMinMicroS_tag           5
#define RCConfig_elevatorMaxMicroS_tag           6
#define RCConfig_rudderMinMicroS_tag             7
#define RCConfig_rudderMaxMicroS_tag             8
#define RCConfig_gearOnMicroS_tag                9
#define RCConfig_gearOffMicroS_tag               10
#define RCConfig_auxOnMicroS_tag                 11
#define RCConfig_auxOffMicroS_tag                12
#define RCSamples_throttleMicroS_tag             1
#define RCSamples_aileronMicroS_tag              2
#define RCSamples_elevatorMicroS_tag             3
#define RCSamples_rudderMicroS_tag               4
#define RCSamples_gearMicroS_tag                 5
#define RCSamples_auxMicroS_tag                  6

/* Struct field encoding specification for nanopb */
extern const pb_field_t ConnectToFsm_fields[2];
extern const pb_field_t FlightSensorSamples_fields[10];
extern const pb_field_t ProximitySensorSamples_fields[7];
extern const pb_field_t QuadcopterConfig_fields[5];
extern const pb_field_t RCConfig_fields[13];
extern const pb_field_t RCSamples_fields[7];
extern const pb_field_t MotorSamples_fields[5];
extern const pb_field_t FlightControlSystemParameters_fields[10];
extern const pb_field_t FlightCommands_fields[7];
extern const pb_field_t CurrentFlightCmdSource_fields[2];

/* Maximum encoded size of messages (where known) */
#define ConnectToFsm_size                        6
#define FlightSensorSamples_size                 54
#define ProximitySensorSamples_size              36
#define QuadcopterConfig_size                    24
#define RCConfig_size                            72
#define RCSamples_size                           36
#define MotorSamples_size                        24
#define FlightControlSystemParameters_size       54
#define FlightCommands_size                      36
#define CurrentFlightCmdSource_size              6

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define FCB_FSM_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif

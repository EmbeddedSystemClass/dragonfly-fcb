/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.3 at Wed Sep 09 10:39:31 2015. */

#ifndef PB_DRAGONFLY_FCB_CLI_PB_H_INCLUDED
#define PB_DRAGONFLY_FCB_CLI_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
/* Struct definitions */
typedef struct _ControlReferenceSignals {
    bool has_refVx;
    float refVx;
    bool has_refVy;
    float refVy;
    bool has_refVz;
    float refVz;
    bool has_refRoll;
    float refRoll;
    bool has_refPitch;
    float refPitch;
    bool has_refYaw;
    float refYaw;
    bool has_refYawRate;
    float refYawRate;
} ControlReferenceSignals;

typedef struct _FlightStates {
    bool has_posX;
    float posX;
    bool has_posY;
    float posY;
    bool has_posZ;
    float posZ;
    bool has_velX;
    float velX;
    bool has_velY;
    float velY;
    bool has_velZ;
    float velZ;
    bool has_angRoll;
    float angRoll;
    bool has_angPitch;
    float angPitch;
    bool has_angYaw;
    float angYaw;
    bool has_rateRoll;
    float rateRoll;
    bool has_ratePitch;
    float ratePitch;
    bool has_rateYaw;
    float rateYaw;
} FlightStates;

typedef struct _MotorSignalValues {
    bool has_M1;
    int32_t M1;
    bool has_M2;
    int32_t M2;
    bool has_M3;
    int32_t M3;
    bool has_M4;
    int32_t M4;
} MotorSignalValues;

typedef struct _PIDControlParams {
    bool has_K_vxy;
    float K_vxy;
    bool has_Ti_vxy;
    float Ti_vxy;
    bool has_Td_vxy;
    float Td_vxy;
    bool has_K_vz;
    float K_vz;
    bool has_Ti_vz;
    float Ti_vz;
    bool has_Td_vz;
    float Td_vz;
    bool has_K_rollpitch;
    float K_rollpitch;
    bool has_Ti_rollpitch;
    float Ti_rollpitch;
    bool has_Td_rollpitch;
    float Td_rollpitch;
    bool has_K_yawrate;
    float K_yawrate;
    bool has_Ti_yawrate;
    float Ti_yawrate;
    bool has_Td_yawrate;
    float Td_yawrate;
} PIDControlParams;

typedef struct _ReceiverSignalValues {
    bool has_throttle;
    int32_t throttle;
    bool has_aileron;
    int32_t aileron;
    bool has_elevator;
    int32_t elevator;
    bool has_rudder;
    int32_t rudder;
    bool has_gear;
    int32_t gear;
    bool has_aux1;
    int32_t aux1;
} ReceiverSignalValues;

typedef struct _SensorSamples {
    bool has_gyroAngRateXb;
    float gyroAngRateXb;
    bool has_gyroAngRateYb;
    float gyroAngRateYb;
    bool has_gyroAngRateZb;
    float gyroAngRateZb;
    bool has_accX;
    float accX;
    bool has_accY;
    float accY;
    bool has_accZ;
    float accZ;
    bool has_magX;
    float magX;
    bool has_magY;
    float magY;
    bool has_magZ;
    float magZ;
} SensorSamples;

typedef struct _SimulatedStates {
    bool has_posX;
    float posX;
    bool has_posY;
    float posY;
    bool has_posZ;
    float posZ;
    bool has_velX;
    float velX;
    bool has_velY;
    float velY;
    bool has_velZ;
    float velZ;
    bool has_angRoll;
    float angRoll;
    bool has_angPitch;
    float angPitch;
    bool has_angYaw;
    float angYaw;
    bool has_rateRoll;
    float rateRoll;
    bool has_ratePitch;
    float ratePitch;
    bool has_rateYaw;
    float rateYaw;
} SimulatedStates;

/* Default values for struct fields */

/* Initializer values for message structs */
#define ReceiverSignalValues_init_default        {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define MotorSignalValues_init_default           {false, 0, false, 0, false, 0, false, 0}
#define SensorSamples_init_default               {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define FlightStates_init_default                {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define PIDControlParams_init_default            {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define ControlReferenceSignals_init_default     {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define SimulatedStates_init_default             {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define ReceiverSignalValues_init_zero           {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define MotorSignalValues_init_zero              {false, 0, false, 0, false, 0, false, 0}
#define SensorSamples_init_zero                  {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define FlightStates_init_zero                   {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define PIDControlParams_init_zero               {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define ControlReferenceSignals_init_zero        {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define SimulatedStates_init_zero                {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}

/* Field tags (for use in manual encoding/decoding) */
#define ControlReferenceSignals_refVx_tag        1
#define ControlReferenceSignals_refVy_tag        2
#define ControlReferenceSignals_refVz_tag        3
#define ControlReferenceSignals_refRoll_tag      4
#define ControlReferenceSignals_refPitch_tag     5
#define ControlReferenceSignals_refYaw_tag       6
#define ControlReferenceSignals_refYawRate_tag   7
#define FlightStates_posX_tag                    1
#define FlightStates_posY_tag                    2
#define FlightStates_posZ_tag                    3
#define FlightStates_velX_tag                    4
#define FlightStates_velY_tag                    5
#define FlightStates_velZ_tag                    6
#define FlightStates_angRoll_tag                 7
#define FlightStates_angPitch_tag                8
#define FlightStates_angYaw_tag                  9
#define FlightStates_rateRoll_tag                10
#define FlightStates_ratePitch_tag               11
#define FlightStates_rateYaw_tag                 12
#define MotorSignalValues_M1_tag                 1
#define MotorSignalValues_M2_tag                 2
#define MotorSignalValues_M3_tag                 3
#define MotorSignalValues_M4_tag                 4
#define PIDControlParams_K_vxy_tag               1
#define PIDControlParams_Ti_vxy_tag              2
#define PIDControlParams_Td_vxy_tag              3
#define PIDControlParams_K_vz_tag                4
#define PIDControlParams_Ti_vz_tag               5
#define PIDControlParams_Td_vz_tag               6
#define PIDControlParams_K_rollpitch_tag         7
#define PIDControlParams_Ti_rollpitch_tag        8
#define PIDControlParams_Td_rollpitch_tag        9
#define PIDControlParams_K_yawrate_tag           10
#define PIDControlParams_Ti_yawrate_tag          11
#define PIDControlParams_Td_yawrate_tag          12
#define ReceiverSignalValues_throttle_tag        1
#define ReceiverSignalValues_aileron_tag         2
#define ReceiverSignalValues_elevator_tag        3
#define ReceiverSignalValues_rudder_tag          4
#define ReceiverSignalValues_gear_tag            5
#define ReceiverSignalValues_aux1_tag            6
#define SensorSamples_gyroAngRateXb_tag          1
#define SensorSamples_gyroAngRateYb_tag          2
#define SensorSamples_gyroAngRateZb_tag          3
#define SensorSamples_accX_tag                   4
#define SensorSamples_accY_tag                   5
#define SensorSamples_accZ_tag                   6
#define SensorSamples_magX_tag                   7
#define SensorSamples_magY_tag                   8
#define SensorSamples_magZ_tag                   9
#define SimulatedStates_posX_tag                 1
#define SimulatedStates_posY_tag                 2
#define SimulatedStates_posZ_tag                 3
#define SimulatedStates_velX_tag                 4
#define SimulatedStates_velY_tag                 5
#define SimulatedStates_velZ_tag                 6
#define SimulatedStates_angRoll_tag              7
#define SimulatedStates_angPitch_tag             8
#define SimulatedStates_angYaw_tag               9
#define SimulatedStates_rateRoll_tag             10
#define SimulatedStates_ratePitch_tag            11
#define SimulatedStates_rateYaw_tag              12

/* Struct field encoding specification for nanopb */
extern const pb_field_t ReceiverSignalValues_fields[7];
extern const pb_field_t MotorSignalValues_fields[5];
extern const pb_field_t SensorSamples_fields[10];
extern const pb_field_t FlightStates_fields[13];
extern const pb_field_t PIDControlParams_fields[13];
extern const pb_field_t ControlReferenceSignals_fields[8];
extern const pb_field_t SimulatedStates_fields[13];

/* Maximum encoded size of messages (where known) */
#define ReceiverSignalValues_size                66
#define MotorSignalValues_size                   44
#define SensorSamples_size                       45
#define FlightStates_size                        60
#define PIDControlParams_size                    60
#define ControlReferenceSignals_size             35
#define SimulatedStates_size                     60

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define DRAGONFLY_FCB_CLI_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif

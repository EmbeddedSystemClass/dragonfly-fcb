// Declaration of protobuffer messages supported by the Dragonfly
// Flight Control Board (FCB) Command Line Interface (CLI)

// Receiver signal values normalized to [-32768, 32767]
message ReceiverSignalValues {
	optional int32 throttle = 1;
	optional int32 aileron = 2;
	optional int32 elevator = 3;
	optional int32 rudder = 4;
	optional int32 gear = 5;
	optional int32 aux1 = 6;
}

// Motor signal values normalized to [0, 65535]
message MotorSignalValues {
	optional int32 M1 = 1;
	optional int32 M2 = 2;
	optional int32 M3 = 3;
	optional int32 M4 = 4;
}

// Sensor sample values
message SensorSamples {
	optional float gyroAngRateXb = 1;
	optional float gyroAngRateYb = 2;
	optional float gyroAngRateZb = 3;
	optional float accX = 4;
	optional float accY = 5;
	optional float accZ = 6;
	optional float magX = 7;
	optional float magY = 8;
	optional float magZ = 9;
}

// Actual flight states as estimated by the on-board Kalman and sensor fusion algorithms
message FlightStates {
	optional float posX = 1; // World state coordinates [m]
	optional float posY = 2;
	optional float posZ = 3;
	optional float velX = 4;
	optional float velY = 5;
	optional float velZ = 6;
	optional float angRoll = 7; // [rad]
	optional float angPitch = 8;
	optional float angYaw = 9;
	optional float rateRoll = 10; // [rad/s]
	optional float ratePitch = 11;
	optional float rateYaw = 12;
}

// Sets the PID control parameters used by the Flight Control Board control algorithms
message PIDControlParams {
	optional float K_vz = 1;
	optional float Ti_vz = 2;
	optional float Td_vz = 3;
	optional float K_vx = 4;
	optional float Ti_vx = 5;
	optional float Td_vx = 6;
	optional float K_rollpitch = 7;
	optional float Ti_rollpitch = 8;
	optional float Td_rollpitch = 9;
	optional float K_yawrate = 10;
	optional float Ti_yawrate = 11;
	optional float Td_yawrate = 12;
}

// Simulated states supposed to be sent from simulator to Flight Control Board and used to drive the control algorithms
message SimulatedStates {
	optional float posX = 1; // World state coordinates [m]
	optional float posY = 2;
	optional float posZ = 3;
	optional float velX = 4;
	optional float velY = 5;
	optional float velZ = 6;
	optional float angRoll = 7; // [rad]
	optional float angPitch = 8;
	optional float angYaw = 9;
	optional float rateRoll = 10; // [rad/s]
	optional float ratePitch = 11;
	optional float rateYaw = 12;
}